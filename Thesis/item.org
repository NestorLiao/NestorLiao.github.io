#+LATEX_CLASS: article
* 大纲：简约MP3播放器，具备主动噪声取消（ANC）和健康监测功能

* I. 硬件概述
** 1. 核心组件
- *微控制器 (MCU)*: STM32F103C8T6  
  - 管理用户界面、任务调度和与外设的通信。
- *PPG传感器*: MAX30102  
  - 监测心率、血氧水平和血压趋势。
- *DAC*: PCM5102A  
  - 将数字音乐数据转换为高质量的模拟音频。
- *放大器*: TPA3136  
  - 将音频和ANC信号驱动到耳机。
- *电子墨水显示屏*: 1.54" SPI接口（例如，Waveshare）。  
  - 显示曲目信息、健康数据和用户界面元素。
- *麦克风*: MEMS（例如，ICS-40720）。  
  - 捕捉外部噪声用于ANC处理。
- *旋转编码器*: EC11  
  - 用于导航和音量控制。
- *SD卡模块*: 基于SPI。  
  - 存储音频文件和用户数据。
- *电池和充电器*: Li-ion电池 + TP4056充电器。  
  - 为系统供电并处理充电。
[[https://image.lceda.cn/pullimage/Rw1WEPNb0USQA2ZPAf46KLdB4YdvrNKaomdU6DTM.jpeg][img]]


** 2. 耳机设计
- *ANC电路*: 集成到MP3播放器中。  
  - 使用麦克风捕捉噪声并输出反向波形。
- *FPC驱动器与磁铁*:  
  - 单个磁铁驱动双层FPC以产生音频和ANC信号。

[[https://phys420.phas.ubc.ca/p420_16/bartok1/images/circuit_schematic.png][img]]
[[https://phys420.phas.ubc.ca/p420_16/bartok1/images/block_diagram.png][img]]

** 3. 连接和协议
- *I2C*: MAX30102（PPG传感器）。  
- *SPI*: SD卡和电子墨水显示屏。  
- *I2S*: PCM5102A DAC。  
- *GPIO*: 按钮、旋转编码器和控制信号。

* II. 软件计划

** 1. 库
- *RTIC*: 实时中断驱动并发，用于任务管理。
- *stm32f1xx-hal*: STM32F1系列的硬件抽象层。
- *embedded-graphics*: 用于在电子墨水显示屏上创建UI。
- *epd-waveshare*: 电子墨水显示屏的驱动程序。
- *max3010x*: MAX30102传感器的Rust驱动程序。
- *embedded-sdmmc*: 基于SPI的SD卡交互。
- *fatfs*: FAT文件系统支持。
- *heapless*: 用于no_std的轻量级集合。

** 2. 软件功能
1. *任务调度*:  
   - 使用**RTIC**定期刷新显示、读取PPG数据并管理输入。
2. *健康监测*:  
   - 使用**max3010x**读取心率和血氧饱和度（SpO2）。  
   - 将读取数据显示在电子墨水显示屏上。
3. *音乐播放*:  
   - 使用**embedded-sdmmc**和**fatfs**从SD卡读取音频文件。  
   - 通过I2S流式传输数据到PCM5102A。
4. *主动噪声取消（ANC）*:  
   - 在专用电路中处理麦克风输入。  
   - 可选地，在STM32上实现额外的DSP处理。
5. *用户界面与控制*:  
   - 使用**embedded-graphics**设计UI。  
   - 处理旋转编码器的导航和音量控制。  
   - 按钮映射用于播放/暂停、ANC切换、切换曲目和设置。
6. *电源管理*:  
   - 在空闲状态下将STM32置于低功耗模式。

* III. 步骤计划
** 第1阶段：软件开发和仿真
1. *设置开发环境*:  
   - 安装必要的Rust库。  
   - 配置QEMU用于STM32F103仿真。
2. *开发驱动程序*:  
   - SPI: 编写SD卡和电子墨水显示屏的驱动程序。  
   - I2C: 编写/测试MAX30102驱动程序的集成，使用模拟数据。  
   - GPIO: 处理按钮输入和旋转编码器逻辑。
3. *模拟工作流程*:  
   - 在QEMU中测试定期健康数据更新和UI渲染。  
   - 模拟SD卡访问并模拟音频播放逻辑。

** 第2阶段：硬件原型制作
1. *组装硬件*:  
   - 构建带有TPA3136和MEMS麦克风的ANC电路。  
   - 连接电子墨水显示屏、MAX30102、SD卡模块、PCM5102A和电池。
2. *测试模块*:  
   - 验证：
     - SD卡和电子墨水显示屏的SPI通信。  
     - MAX30102的I2C通信。  
     - PCM5102A的I2S音频输出。  
   - 使用信号发生器和示波器测量ANC性能。

** 第3阶段：固件部署
1. *集成驱动程序*:  
   - 部署并测试所有Rust驱动程序在STM32上的运行。
2. *实现RTIC调度器*:  
   - 安排显示更新、健康监测和音频播放任务。
3. *优化电源使用*:  
   - 对未使用的外设实施低功耗模式。

** 第4阶段：最终测试
1. *系统验证*:  
   - 确保UI更新流畅、健康数据准确、音频播放无缝。  
   - 验证ANC有效地减少噪声。
2. *用户体验改进*:  
   - 测试按钮映射、旋转编码器响应性和整体可用性。

** 第5阶段：外壳设计与制造
1. *PCB设计*:  
   - 使用**EasyEDA**设计PCB。  
   - 路由连接所有组件并测试组装后的PCB。
2. *3D外壳设计*:  
   - 使用**Onshape**设计设备外壳。
3. *最终组装*:  
   - 将硬件组装到3D打印外壳中。

* IV. 工具与资源
- *电路仿真器*:  
  - **Ngspice**或**QUCS**（适用于ANC电路设计的Linux兼容工具）。
- *Rust库*:  
  - 通过`cargo`下载并集成。
- *开发环境*:  
  - Rust、QEMU、GDB用于调试。

* V. 预期结果
一款功能完整的设备，结合了：  
- 电子墨水显示屏上的简约UI。  
- 高保真音乐播放与ANC。  
- 使用PPG传感器的实时健康监测。  
- 长电池寿命和直观的用户界面。
